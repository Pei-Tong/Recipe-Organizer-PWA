{"mappings":"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","sources":["<anon>","node_modules/loglevel/lib/loglevel.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"lR3v8\", function(module, exports) {\n/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/ (function(root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) define(definition);\n    else if (0, module.exports) module.exports = definition();\n    else root.log = definition();\n})(module.exports, function() {\n    \"use strict\";\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = typeof window !== undefinedType && typeof window.navigator !== undefinedType && /Trident\\/|MSIE /.test(window.navigator.userAgent);\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n    var _loggersByName = {};\n    var defaultLogger = null;\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') return method.bind(obj);\n        else try {\n            return Function.prototype.bind.call(method, obj);\n        } catch (e) {\n            // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n            return function() {\n                return Function.prototype.apply.apply(method, [\n                    obj,\n                    arguments\n                ]);\n            };\n        }\n    }\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) console.log.apply(console, arguments);\n            else // In old IE, native console methods themselves don't have apply().\n            Function.prototype.apply.apply(console.log, [\n                console,\n                arguments\n            ]);\n        }\n        if (console.trace) console.trace();\n    }\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') methodName = 'log';\n        if (typeof console === undefinedType) return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        else if (methodName === 'trace' && isIE) return traceForIE;\n        else if (console[methodName] !== undefined) return bindMethod(console, methodName);\n        else if (console.log !== undefined) return bindMethod(console, 'log');\n        else return noop;\n    }\n    // These private functions always need `this` to be set properly\n    function replaceLoggingMethods() {\n        /*jshint validthis:true */ var level = this.getLevel();\n        // Replace the actual methods.\n        for(var i = 0; i < logMethods.length; i++){\n            var methodName = logMethods[i];\n            this[methodName] = i < level ? noop : this.methodFactory(methodName, level, this.name);\n        }\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n        // Return any important warnings.\n        if (typeof console === undefinedType && level < this.levels.SILENT) return \"No console available for logging\";\n    }\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName) {\n        return function() {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, _level, _loggerName) {\n        /*jshint validthis:true */ return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n    function Logger(name, factory) {\n        // Private instance variables.\n        var self = this;\n        /**\n       * The level inherited from a parent logger (or a global default). We\n       * cache this here rather than delegating to the parent so that it stays\n       * in sync with the actual logging methods that we have installed (the\n       * parent could change levels but we might not have rebuilt the loggers\n       * in this child yet).\n       * @type {number}\n       */ var inheritedLevel;\n        /**\n       * The default level for this logger, if any. If set, this overrides\n       * `inheritedLevel`.\n       * @type {number|null}\n       */ var defaultLevel;\n        /**\n       * A user-specific level for this logger. If set, this overrides\n       * `defaultLevel`.\n       * @type {number|null}\n       */ var userLevel;\n        var storageKey = \"loglevel\";\n        if (typeof name === \"string\") storageKey += \":\" + name;\n        else if (typeof name === \"symbol\") storageKey = undefined;\n        function persistLevelIfPossible(levelNum) {\n            var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n            if (typeof window === undefinedType || !storageKey) return;\n            // Use localStorage if available\n            try {\n                window.localStorage[storageKey] = levelName;\n                return;\n            } catch (ignore) {}\n            // Use session cookie as fallback\n            try {\n                window.document.cookie = encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n            } catch (ignore) {}\n        }\n        function getPersistedLevel() {\n            var storedLevel;\n            if (typeof window === undefinedType || !storageKey) return;\n            try {\n                storedLevel = window.localStorage[storageKey];\n            } catch (ignore) {}\n            // Fallback to cookies if local storage gives us nothing\n            if (typeof storedLevel === undefinedType) try {\n                var cookie = window.document.cookie;\n                var cookieName = encodeURIComponent(storageKey);\n                var location = cookie.indexOf(cookieName + \"=\");\n                if (location !== -1) storedLevel = /^([^;]+)/.exec(cookie.slice(location + cookieName.length + 1))[1];\n            } catch (ignore) {}\n            // If the stored level is not valid, treat it as if nothing was stored.\n            if (self.levels[storedLevel] === undefined) storedLevel = undefined;\n            return storedLevel;\n        }\n        function clearPersistedLevel() {\n            if (typeof window === undefinedType || !storageKey) return;\n            // Use localStorage if available\n            try {\n                window.localStorage.removeItem(storageKey);\n            } catch (ignore) {}\n            // Use session cookie as fallback\n            try {\n                window.document.cookie = encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n            } catch (ignore) {}\n        }\n        function normalizeLevel(input) {\n            var level = input;\n            if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) level = self.levels[level.toUpperCase()];\n            if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) return level;\n            else throw new TypeError(\"log.setLevel() called with invalid level: \" + input);\n        }\n        /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */ self.name = name;\n        self.levels = {\n            \"TRACE\": 0,\n            \"DEBUG\": 1,\n            \"INFO\": 2,\n            \"WARN\": 3,\n            \"ERROR\": 4,\n            \"SILENT\": 5\n        };\n        self.methodFactory = factory || defaultMethodFactory;\n        self.getLevel = function() {\n            if (userLevel != null) return userLevel;\n            else if (defaultLevel != null) return defaultLevel;\n            else return inheritedLevel;\n        };\n        self.setLevel = function(level, persist) {\n            userLevel = normalizeLevel(level);\n            if (persist !== false) persistLevelIfPossible(userLevel);\n            // NOTE: in v2, this should call rebuild(), which updates children.\n            return replaceLoggingMethods.call(self);\n        };\n        self.setDefaultLevel = function(level) {\n            defaultLevel = normalizeLevel(level);\n            if (!getPersistedLevel()) self.setLevel(level, false);\n        };\n        self.resetLevel = function() {\n            userLevel = null;\n            clearPersistedLevel();\n            replaceLoggingMethods.call(self);\n        };\n        self.enableAll = function(persist) {\n            self.setLevel(self.levels.TRACE, persist);\n        };\n        self.disableAll = function(persist) {\n            self.setLevel(self.levels.SILENT, persist);\n        };\n        self.rebuild = function() {\n            if (defaultLogger !== self) inheritedLevel = normalizeLevel(defaultLogger.getLevel());\n            replaceLoggingMethods.call(self);\n            if (defaultLogger === self) for(var childName in _loggersByName)_loggersByName[childName].rebuild();\n        };\n        // Initialize all the internal levels.\n        inheritedLevel = normalizeLevel(defaultLogger ? defaultLogger.getLevel() : \"WARN\");\n        var initialLevel = getPersistedLevel();\n        if (initialLevel != null) userLevel = normalizeLevel(initialLevel);\n        replaceLoggingMethods.call(self);\n    }\n    /*\n     *\n     * Top-level API\n     *\n     */ defaultLogger = new Logger();\n    defaultLogger.getLogger = function getLogger(name) {\n        if (typeof name !== \"symbol\" && typeof name !== \"string\" || name === \"\") throw new TypeError(\"You must supply a name when creating a logger.\");\n        var logger = _loggersByName[name];\n        if (!logger) logger = _loggersByName[name] = new Logger(name, defaultLogger.methodFactory);\n        return logger;\n    };\n    // Grab the current global log variable in case of overwrite\n    var _log = typeof window !== undefinedType ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType && window.log === defaultLogger) window.log = _log;\n        return defaultLogger;\n    };\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n    return defaultLogger;\n});\n\n});\n\n\n//# sourceMappingURL=loglevel.9b65ffcf.js.map\n","/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    var _loggersByName = {};\n    var defaultLogger = null;\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods() {\n        /*jshint validthis:true */\n        var level = this.getLevel();\n\n        // Replace the actual methods.\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, this.name);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n\n        // Return any important warnings.\n        if (typeof console === undefinedType && level < this.levels.SILENT) {\n            return \"No console available for logging\";\n        }\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, _level, _loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, factory) {\n      // Private instance variables.\n      var self = this;\n      /**\n       * The level inherited from a parent logger (or a global default). We\n       * cache this here rather than delegating to the parent so that it stays\n       * in sync with the actual logging methods that we have installed (the\n       * parent could change levels but we might not have rebuilt the loggers\n       * in this child yet).\n       * @type {number}\n       */\n      var inheritedLevel;\n      /**\n       * The default level for this logger, if any. If set, this overrides\n       * `inheritedLevel`.\n       * @type {number|null}\n       */\n      var defaultLevel;\n      /**\n       * A user-specific level for this logger. If set, this overrides\n       * `defaultLevel`.\n       * @type {number|null}\n       */\n      var userLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var cookieName = encodeURIComponent(storageKey);\n                  var location = cookie.indexOf(cookieName + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(\n                          cookie.slice(location + cookieName.length + 1)\n                      )[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      function normalizeLevel(input) {\n          var level = input;\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              return level;\n          } else {\n              throw new TypeError(\"log.setLevel() called with invalid level: \" + input);\n          }\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          if (userLevel != null) {\n            return userLevel;\n          } else if (defaultLevel != null) {\n            return defaultLevel;\n          } else {\n            return inheritedLevel;\n          }\n      };\n\n      self.setLevel = function (level, persist) {\n          userLevel = normalizeLevel(level);\n          if (persist !== false) {  // defaults to true\n              persistLevelIfPossible(userLevel);\n          }\n\n          // NOTE: in v2, this should call rebuild(), which updates children.\n          return replaceLoggingMethods.call(self);\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = normalizeLevel(level);\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          userLevel = null;\n          clearPersistedLevel();\n          replaceLoggingMethods.call(self);\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      self.rebuild = function () {\n          if (defaultLogger !== self) {\n              inheritedLevel = normalizeLevel(defaultLogger.getLevel());\n          }\n          replaceLoggingMethods.call(self);\n\n          if (defaultLogger === self) {\n              for (var childName in _loggersByName) {\n                _loggersByName[childName].rebuild();\n              }\n          }\n      };\n\n      // Initialize all the internal levels.\n      inheritedLevel = normalizeLevel(\n          defaultLogger ? defaultLogger.getLevel() : \"WARN\"\n      );\n      var initialLevel = getPersistedLevel();\n      if (initialLevel != null) {\n          userLevel = normalizeLevel(initialLevel);\n      }\n      replaceLoggingMethods.call(self);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    defaultLogger = new Logger();\n\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n            throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n            logger = _loggersByName[name] = new Logger(\n                name,\n                defaultLogger.methodFactory\n            );\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","root","definition","noop","undefinedType","isIE","window","navigator","test","userAgent","logMethods","_loggersByName","defaultLogger","bindMethod","obj","methodName","method","bind","Function","prototype","call","e","apply","arguments","traceForIE","console","log","trace","replaceLoggingMethods","level","getLevel","i","length","methodFactory","name","debug","levels","SILENT","enableLoggingWhenConsoleArrives","defaultMethodFactory","_level","_loggerName","realMethod","undefined","Logger","factory","inheritedLevel","defaultLevel","userLevel","self","storageKey","getPersistedLevel","storedLevel","localStorage","ignore","cookie","document","cookieName","encodeURIComponent","location","indexOf","exec","slice","normalizeLevel","input","toUpperCase","TypeError","setLevel","persist","persistLevelIfPossible","levelNum","levelName","setDefaultLevel","resetLevel","clearPersistedLevel","removeItem","enableAll","TRACE","disableAll","rebuild","childName","initialLevel","getLogger","logger","_log","noConflict","getLoggers","define","amd"],"version":3,"file":"loglevel.9b65ffcf.js.map"}